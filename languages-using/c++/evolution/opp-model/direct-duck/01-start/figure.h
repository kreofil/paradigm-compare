#ifndef __figure__
#define __figure__

//------------------------------------------------------------------------------
// figure.h - содержит описание обобщающей геометрической фигуры,
// являющееся базовыым классом для всех прочих фигур
//------------------------------------------------------------------------------

#include <fstream>
#include <vector>
#include "any.h"

//------------------------------------------------------------------------------
// Класс, обобщающает все имеющиеся фигуры.
// Является абстрактным, обеспечивая, тем самым, проверку интерфейса
class Figure {
public:
  Figure(); // Конструктор, так как интефейс формируется и инициализируется
  // Возможно должен быть нормальный деструктор, отвечающий за удаление
  // подключенных объектов. Но не факт. Пок игнорирую.
  //~Figure();
  // Идентификация, порождение и ввод фигуры из потока
  static  Figure* In(std::ifstream &ifst);
  // Метод ввода фигуры через параметрическую таблицу
  void InFP(std::ifstream &ifst);
  // Метод вывода фигуры через параметрическую таблицу
  void OutFP(std::ofstream &ofst);

  // Указатель на подключаемый объект, который имеет методы,
  // зарегистрированные в параметрических таблицах для заданного интерфейса
  Any* specObject;
};

// Общее описание типа обобщающих функций для интрефейса фигур
typedef void (*InDataP)(Any* f, std::ifstream &ifst);
typedef void (*OutDataP)(Any* f, std::ofstream &ofst);

// Счетчик числа зарегистрированных специализаций
extern int specCounter;
// Параметрическая таблица для функций ввода
// static std::vector<void (*)(Figure* f, std::ifstream &ifst)> InP;
extern std::vector<InDataP> InP;
// Параметрическая таблица для функций вывода
// static std::vector<void (*)(Figure* f, std::ofstream &ofst)> OutP;
extern std::vector<OutDataP> OutP;

#endif // __figure__