#ifndef __context__
#define __context__

#include <stdbool.h>
#include "state.h"

//==============================================================================
// context.h - Описание контекста автомата, обеспечивающего обмен необходимыми
// данными между состояниями и внешней средой.
//==============================================================================

//------------------------------------------------------------------------------
//  Привдварительное описание используемых внешних структур
// struct State;       // Текущее состояние автомата
struct Container;   // Контейнер, используемый для хранения фигур
struct Figure;      // Обобщенная фигура

//------------------------------------------------------------------------------
// Различные состояния задаются расширяемыми перечислениями
// вместо использования классов
typedef struct Context {
  struct State* state;   // Текущее состояние автомата
  struct Container* container; // Связь с контейнером для хранения фигур
  struct Figure* figure; // Последняя введенная фигура
  int a, b, c;           // Переменные, используемые для формирования фигур
  bool stop;              // Признак завершения работы в последнем состоянии
  // Список состояний
  struct State.Start *startState;        // Начальное состояние
  struct State.InSelect *inSelectState;  // Выбор типа фигуры (диалог)
  struct State.InRect *inRectState;      // Ввод сторон прямоугольника
  struct State.GoodRect *goodRectState;  // Проверка сторон прямоугольника
  struct State.InTrian *inTrianState;    // Ввод сторон треугольника
  struct State.GoodTrian *goodTrianState; // Проверка сторон треугольника
  struct State.AddFigure *addFigureState; // Добавление фигуры в контейнер
  struct State.OutCont *outContState;    // Вывод содержимого контейнера
  struct State.Finish *finishState;      // Конечное состояние

} Context;

//------------------------------------------------------------------------------
// Начальная инициализация контекста.
//  устанавливаются поля, которые не меняются в начале работы
void InitContext(Context* context);

//------------------------------------------------------------------------------
// Функция установки состояния внутри контекста
void SetState(Context* context, struct State* state);

//------------------------------------------------------------------------------
// Функция установки связи с контейнером внутри контекста
void SetContainer(Context* context, struct Container* container );

#endif // __context__

